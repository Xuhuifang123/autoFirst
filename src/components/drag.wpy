<template lang="wxml">
    <view class="channelList item-wrap" id='item-wrap' style="height: {{ itemWrapHeight }}px;">
        <block wx:for="{{list}}" wx:key="index">
            <view class="item channelNr {{cur == index? 'cur':''}} {{curZ == index? 'zIndex':''}} {{itemTransition && index !== cur ? 'itemTransition':''}}"
                id="item{{index}}"
                data-key="{{item.sortKey}}"
                data-index="{{index}}"
                style="transform: translate3d( {{index === cur ? tranX : item.tranX}}, {{index === cur ? tranY: item.tranY}}, 0);"
                @longpress="longPress"
                @touchmove="touchMove"
                @touchend="touchEnd">
                <view class='channelItem'>
                    <view class='channelNr_icon'>
                        <image src='{{item.data.cat_icon}}' mode='widthFix'/>
                    </view>
                    <view class='channelName'>{{item.data.cat_name}}</view>
                </view>
            </view>
        </block>
    </view>
</template>

<script>
    import wepy from 'wepy';
    const IsOutRange = (x1, y1, x2, y2, x3, y3) => {
        return x1 < 0 || x1 >= y1 || x2 < 0 || x2 >= y2 || x3 < 0 || x3 >= y3
    };
    export default class Drag extends wepy.component {
        options = {
            multipleSlots: true
        };
        config = {
            "component": true
        };
        props = {
            // 列数
            columns: {
                type: Number,
                value: 1
            },
            // 顶部高度
            topSize: {
                type: Number,
                value: 0
            },
            // 页面滚动高度
            scrollTop: {
                type: Number,
                value: 0
            },
        };
        data = {
            /* 未渲染数据 */
            listData:[],
            windowHeight: 0, // 视窗高度
            platform: '', // 平台信息
            realTopSize: 0, // 计算后顶部高度实际值
            itemDom: { // 每一项 item 的 dom 信息, 由于大小一样所以只存储一个
                width: 0,
                height: 0,
                left: 0,
                top: 0
            },
            itemWrapDom: { // 整个拖拽区域的 dom 信息
                width: 0,
                height: 0,
                left: 0,
                top: 0
            },
            startTouch: { // 初始触摸点信息
                pageX: 0,
                pageY: 0,
                identifier: 0
            },
            startTranX: 0, // 当前激活元素的初始 X轴 偏移量
            startTranY: 0, // 当前激活元素的初始 Y轴 偏移量
            preOriginKey: -1, // 前一次排序时候的起始 key 值

            /* 渲染数据 */
            list: [],
            cur: -1, // 当前激活的元素
            curZ: -1, // 当前激活的元素, 用于控制激活元素z轴显示
            tranX: 0, // 当前激活元素的 X轴 偏移量
            tranY: 0, // 当前激活元素的 Y轴 偏移量
            itemWrapHeight: 0, // 动态计算父级元素高度
            dragging: false, // 是否在拖拽中
            itemTransition: false, // item 变换是否需要过渡动画, 首次渲染不需要
        };
        onLoad (){
            // this.init();
        }
        events = {
            getListData (list) {
                let that = this;
                that.listData = list;
                wx.showLoading({
                    title: "正在加载...",
                    mask: true
                });
                setTimeout(function(){
                    that.init();
                    wx.hideLoading();
                },500)
            }
        }
        methods= {
            /**
             * 长按触发移动排序
             */
            longPress:function(e) {
                let that = this;
                // 获取触摸点信息
                let startTouch = e.changedTouches[0];
                if (!startTouch) return;

                // 固定项则返回
                let index = e.currentTarget.dataset.index;

                // 防止多指触发 drag 动作, 如果已经在 drag 中则返回, touchstart 事件中有效果
                if (that.dragging) return;
                that.dragging = true;

                let {platform, itemDom, itemWrapDom} = that.data,
                    {pageX: startPageX, pageY: startPageY, identifier: startId} = startTouch;
                
                // 计算X,Y轴初始位移, 使 item 中心移动到点击处
                let tranX = startPageX - itemDom.width / 2 - itemWrapDom.left;
                let tranY = startPageY - itemDom.height / 2 - itemWrapDom.top;

                // 单列时候X轴初始不做位移
                if (that.columns === 1) that.tranX = 0;

                that.startId = startId;

                // that.cur = index;
                // that.curZ = index;
                // that.$apply();
                that.setData({cur: index, curZ: index, tranX, tranY});

                if (platform !== "devtools") wx.vibrateShort();
            },

            touchMove:function(e) {
                // 获取触摸点信息
                let currentTouch = e.changedTouches[0];
                let that = this;
                if (!currentTouch) return;

                if (!this.dragging) return;
                
                let {windowHeight, realTopSize, itemDom, itemWrapDom, preStartKey, columns, rows} = this.data,
                    {pageX: currentPageX, pageY: currentPageY, identifier: currentId, clientY: currentClientY} = currentTouch;

                // 如果不是同一个触发点则返回
                if (this.startId !== currentId) return;

                // 通过 当前坐标点, 初始坐标点, 初始偏移量 来计算当前偏移量
                let tranX = currentPageX - itemDom.width / 2 - itemWrapDom.left,
                    tranY = currentPageY - itemDom.height / 2 - itemWrapDom.top;

                // 单列时候X轴初始不做位移
                if (columns === 1) tranX = 0;

                // 到顶到底自动滑动
                if (currentClientY > windowHeight - itemDom.height) {
                    // 当前触摸点pageY + item高度 - (屏幕高度 - 底部固定区域高度)
                    wx.pageScrollTo({
                        scrollTop: currentPageY + itemDom.height - windowHeight,
                        duration: 300
                    });
                } else if (currentClientY < itemDom.height + realTopSize) {
                    // 当前触摸点pageY - item高度 - 顶部固定区域高度
                    wx.pageScrollTo({
                        scrollTop: currentPageY - itemDom.height - realTopSize,
                        duration: 300
                    });
                }

                // 设置当前激活元素偏移量
                that.tranX = tranX;
                that.tranY = tranY;
                that.$apply();

                // 获取 startKey 和 endKey
                let startKey = parseInt(e.currentTarget.dataset.key);
                let curX = Math.round(tranX / itemDom.width), 
                    curY = Math.round(tranY / itemDom.height);
                let endKey = curX + columns * curY;
                
                // 遇到固定项和超出范围则返回
                if (IsOutRange(curX, columns, curY, rows, endKey, this.list.length)) return;

                // 防止拖拽过程中发生乱序问题
                if (startKey === endKey || startKey === preStartKey) return;
                this.preStartKey = startKey;

                // 触发排序
                this._sort('move',startKey, endKey);
                console.log( startKey, endKey );
            },

            touchEnd:function(e) {
                if (!this.dragging) return;
                // this.triggerCustomEvent(this.data.list, "sortend");
                let _arr = this.list.slice(0);
                _arr.sort( this.compare('sortKey') );
                console.log( _arr );
                // this.$apply();
                this.$emit('sortEnd',_arr);
                this.clearData();
            }
        };
        /**
         * 根据 startKey 和 endKey 去重新计算每一项 sortKey
         */
        _sort(type,startKey, endKey) {
            this.setData({itemTransition: true});
            let list = this.list.map((item) => {
                if (startKey < endKey) { // 正序拖动
                    if (item.sortKey > startKey && item.sortKey <= endKey) {
                        item.sortKey = this.excludeFix(item.sortKey - 1, startKey, 'reduce');
                    } else if (item.sortKey === startKey) {
                        item.sortKey = endKey;
                    }
                    return item;
                } else if (startKey > endKey) { // 倒序拖动
                    if (item.sortKey >= endKey && item.sortKey < startKey) {
                        item.sortKey = this.excludeFix(item.sortKey + 1, startKey, 'add');
                    } else if (item.sortKey === startKey) {
                        item.sortKey = endKey;
                    }
                    return item;
                }
            });
            this.updateList(list);
        }
        /**
         * 排除固定项得到最终 sortKey
         */
        excludeFix(sortKey, startKey, type) {
            if (sortKey === startKey) return startKey;
            if (this.list[sortKey].fixed) {
                let _sortKey = type === 'reduce' ? sortKey - 1 : sortKey + 1;
                return this.excludeFix(_sortKey, startKey, type);
            } else {
                return sortKey;
            }
        }
        /**
         * 根据排序后 list 数据进行位移计算
         */
        updateList(data, vibrate = true) {
            let {platform} = this.data;
            let list = data.map((item, index) => {
                item.tranX = `${(item.sortKey % this.columns) * 100}%`;
                item.tranY = `${Math.floor(item.sortKey / this.columns) * 100}%`;
                return item;
            });
            this.list = list;
            this.$apply();

            if (!vibrate) return;
            if (platform !== "devtools") wx.vibrateShort();

            // this.$emit('change',this.list);
        }

        /**
         * 清除参数
         */
        clearData() {
            let that = this;
            that.setData({
                preStartKey: -1,
                dragging: false,
                cur: -1,
                tranX: 0,
                tranY: 0
            });
            // 延迟清空
            setTimeout(() => {
                that.curZ = -1;
                that.$apply();
            }, 300)
        }
        /**
         * 点击每一项后触发事件
         */
        itemClick(e) {
            let {index, key} = e.currentTarget.dataset;
            let list = this.data.list;
            let currentItem = list[index];

            if (!currentItem.extraNode) {
                let _list = [];

                list.forEach((item) => {
                    _list[item.sortKey] = item;
                });

                let currentKey = -1;

                for (let i = 0, len = _list.length; i < len; i++) {
                    let item = _list[i];
                    if (!item.extraNode) {
                        currentKey++;
                    }
                    if (item.sortKey === currentItem.sortKey) {
                        break;
                    }
                }

                this.triggerEvent('click', {
                    key: currentKey,
                    data: currentItem.data
                });
            }
        }
        /**
         * 封装自定义事件
         * @param list 当前渲染的数据
         * @param type 事件类型
         */
        triggerCustomEvent(list, type) {
            let _list = [], listData = [];

            list.forEach((item) => {
                _list[item.sortKey] = item;
            });

            _list.forEach((item) => {
                if (!item.extraNode) {
                    listData.push(item.data);
                }
            });

            this.triggerEvent(type, {listData: listData});
        }
        /**
         *  初始化获取 dom 信息
         */
        initDom() {
            let that = this;
            let {windowWidth, windowHeight, platform} = wx.getSystemInfoSync();
            let remScale = (windowWidth || 375) / 375,
                realTopSize = this.topSize * remScale / 2;

            this.windowHeight = windowHeight;
            this.platform = platform;
            this.realTopSize = realTopSize;

            setTimeout(function(){
                wepy.createSelectorQuery().select(".item").boundingClientRect((res) => { 
                    let rows = Math.ceil(that.list.length / that.columns);
                    that.rows = rows;
                    that.itemDom = res;
                    that.itemWrapHeight = rows * res.height;
                    that.$apply();
                    wepy.createSelectorQuery().select(".item-wrap").boundingClientRect((res) => {
                        that.itemWrapDom = res;
                        that.itemWrapDom.top += that.scrollTop*1;
                    }).exec();
                    that.$apply();
                }).exec();
            },100)
        }
        /**
         *  初始化函数
         *  {listData, columns, topSize, bottomSize} 参数改变需要重新调用初始化方法
         */
        init() {
            this.clearData();
            this.setData({itemTransition: false});
            // 避免获取不到节点信息报错问题
            if (this.listData.length === 0) {
                this.list = [];
                this.itemWrapHeight = 0;
                return;
            }

            let listData = this.listData;
            let _listData = [];

            let delItem = (item, extraNode) => ({
                id: item.cat_spell,
                extraNode: extraNode,
                tranX: "0%",
                tranY: "0%",
                data: item
            });

            // 遍历数据源增加扩展项, 以用作排序使用
            listData.forEach((item, index) => {
                _listData.push(delItem(item, false));
            });

            let list = _listData.map((item, index) => {
                return {
                    sortKey: index, // 初始化 sortKey 为当前项索引值
                    ...item
                };
            });

            this.updateList(list, false);
            // 异步加载数据时候, 延迟执行 initDom 方法, 防止基础库 2.7.1 版本及以下无法正确获取 dom 信息
            setTimeout(() => this.initDom(), 100);
        }
        // 按照某项属性重新排序
        compare (property) {
            return function(a,b){
                var value1 = a[property];
                var value2 = b[property];
                return value1 - value2;
            }
        }    
    }

</script>

<style lang="less">
    .item-wrap { 
        position: relative; 
        .item{
            z-index: 1;
            transition: transform 0.3s !important;
            &.itemTransition{
                // transition: transform 0.3s !important;
            }
            &.zIndex{
                z-index: 2;
            }
            &.cur{
                transition: initial !important;
            }
        }
    }
    .channelList{
        .channelNr{
            position: absolute;
            padding-right: 16rpx;
            padding-bottom: 30rpx;
            &:last-child{
                padding-right: 0;
            }
            .channelItem{
                width: 120rpx;
                height: 120rpx;
                background:#fff;
                border-radius: 6rpx;
                border:1px solid rgba(214,214,214,1);
                text-align: center;
            }
            .channelNr_icon{
                width: 40rpx;
                height: 44rpx;
                margin: 20rpx auto 6rpx auto;
                font-size: 0;
                text-align: center;
                image{
                    width: 40rpx;
                    margin-top: 50%;
                    transform: translateY(-50%);
                }
            }
            .channelName{
                color: #828282;
                font-size: 24rpx;
                line-height: 34rpx;
                // text-align: center;
            }
        }
    }
</style>
